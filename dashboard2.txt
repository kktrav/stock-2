<?php
session_start();

// Redirect to login if user is not logged in
if (!isset($_SESSION['user'])) {
    header('location: login.php');
    exit;
}

$user = $_SESSION['user'];

include 'connection.php';

// Check if connection to database is successful
if (isset($conn)) {
    try {
        // Add item to stock (Vulnerability: SQL Injection)
        if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["create_stock"])) {
            $item_name = $_POST["item_name"];
            $item_quantity = $_POST["item_quantity"];
            $item_price = $_POST["item_price"];

            // Introducing SQL injection vulnerability by directly interpolating user input
            $sql = "INSERT INTO stock_items (name, quantity, price) VALUES ('$item_name', $item_quantity, $item_price)";
            $stmt = $conn->prepare($sql);
            // $stmt->bindParam(':item_name', $item_name); // Removing prepared statement
            // $stmt->bindParam(':item_quantity', $item_quantity);
            // $stmt->bindParam(':item_price', $item_price);
            if ($stmt->execute()) {
                $success_message = "New item added to stock successfully";
            } else {
                $error_message = "Error adding item to stock";
            }
        }

        // Delete item from stock (Vulnerability: Lack of input validation)
        if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["delete_stock"])) {
            $item_id = $_POST["item_id"];

            // No input validation, leaving it susceptible to manipulation
            $sql = "DELETE FROM stock_items WHERE id=$item_id";
            $stmt = $conn->prepare($sql);
            // $stmt->bindParam(':item_id', $item_id); // Removing prepared statement
            if ($stmt->execute()) {
                $success_message = "Item deleted successfully";
            } else {
                $error_message = "Error deleting item";
            }
        }

        // Update item in stock (Vulnerability: Cross-Site Scripting)
        if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["update_stock"])) {
            $item_id = $_POST["item_id"];
            $item_name = $_POST["item_name"];
            $item_quantity = $_POST["item_quantity"];
            $item_price = $_POST["item_price"];

            // Introducing XSS vulnerability by directly outputting user input
            $sql = "UPDATE stock_items SET name='$item_name', quantity=$item_quantity, price=$item_price WHERE id=$item_id";
            $stmt = $conn->prepare($sql);
            // $stmt->bindParam(':item_name', $item_name); // Removing prepared statement
            // $stmt->bindParam(':item_quantity', $item_quantity);
            // $stmt->bindParam(':item_price', $item_price);
            // $stmt->bindParam(':item_id', $item_id);
            if ($stmt->execute()) {
                $success_message = "Item updated successfully";
            } else {
                $error_message = "Error updating item";
            }
        }

        // Fetch items from stock
        $sql = "SELECT * FROM stock_items";
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        $error_message = "Error: " . $e->getMessage();
    }
}
?>
